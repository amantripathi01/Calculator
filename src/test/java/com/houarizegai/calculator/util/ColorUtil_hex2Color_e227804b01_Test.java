// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Test when the `colorHex` string is null.
    - **Expected Result:** The function should return null.

2. **Scenario:** Test when the `colorHex` string is empty.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

3. **Scenario:** Test when the `colorHex` string is less than 6 characters long.
    - **Expected Result:** The function should throw a `StringIndexOutOfBoundsException`.

4. **Scenario:** Test when the `colorHex` string is 6 characters long and contains valid hexadecimal values.
    - **Input:** `colorHex = "FFFFFF"`
    - **Expected Result:** The function should return a `Color` object with RGB values (255, 255, 255).

5. **Scenario:** Test when the `colorHex` string is more than 6 characters long.
    - **Input:** `colorHex = "FFFFFFF"`
    - **Expected Result:** The function should return a `Color` object with RGB values (255, 255, 255), ignoring the extra characters.

6. **Scenario:** Test when the `colorHex` string contains non-hexadecimal characters.
    - **Input:** `colorHex = "ZZZZZZ"`
    - **Expected Result:** The function should throw a `NumberFormatException`.

7. **Scenario:** Test when the `colorHex` string contains lowercase hexadecimal values.
    - **Input:** `colorHex = "abcdef"`
    - **Expected Result:** The function should return a `Color` object with RGB values (171, 205, 239).

8. **Scenario:** Test when the `colorHex` string contains mixed case hexadecimal values.
    - **Input:** `colorHex = "aBcDeF"`
    - **Expected Result:** The function should return a `Color` object with RGB values (171, 205, 239).
*/

// ********RoostGPT********
package com.houarizegai.calculator.util;

import java.awt.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ColorUtil_hex2Color_e227804b01_Test {

    @Test
    public void testHex2Color_NullInput() {
        assertNull(ColorUtil.hex2Color(null));
    }

    @Test
    public void testHex2Color_EmptyInput() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color(""));
    }

    @Test
    public void testHex2Color_ShortInput() {
        assertThrows(StringIndexOutOfBoundsException.class, () -> ColorUtil.hex2Color("12345"));
    }

    @Test
    public void testHex2Color_ValidInput() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFF"));
    }

    @Test
    public void testHex2Color_LongInput() {
        assertEquals(new Color(255, 255, 255), ColorUtil.hex2Color("FFFFFFF"));
    }

    @Test
    public void testHex2Color_InvalidInput() {
        assertThrows(NumberFormatException.class, () -> ColorUtil.hex2Color("ZZZZZZ"));
    }

    @Test
    public void testHex2Color_LowercaseInput() {
        assertEquals(new Color(171, 205, 239), ColorUtil.hex2Color("abcdef"));
    }

    @Test
    public void testHex2Color_MixedCaseInput() {
        assertEquals(new Color(171, 205, 239), ColorUtil.hex2Color("aBcDeF"));
    }
}
