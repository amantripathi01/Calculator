// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. **Theme Loading Scenario**: Check if the themes are correctly loaded from the ThemeLoader.
2. **Window Initialization Scenario**: Validate if the window is properly initialized with the expected title, size, and location.
3. **Layout Design Scenario**: Verify if the window layout is designed correctly with expected columns and rows.
4. **Input Screen Initialization Scenario**: Check if the input screen is correctly initialized with the expected column and row values.
5. **Button Initialization Scenario**: Ensure the buttons are initialized correctly and placed at the expected positions on the window.
6. **Calculator Type Selector Scenario**: Validate if the calculator type selector is properly initialized.
7. **Theme Selector Initialization Scenario**: Check if the theme selector is correctly initialized.
8. **Window Layout Scenario**: Verify if the window layout is set to null.
9. **Window Resizable Scenario**: Validate if the window resizing is correctly set to false.
10. **Window Close Operation Scenario**: Check if the window close operation is set to EXIT_ON_CLOSE.
11. **Window Visibility Scenario**: Check if the window is visible after the CalculatorUI function is executed.
12. **Columns and Rows Scenario**: Validate if the correct number of columns and rows are created and positioned correctly.
13. **Theme Map Scenario**: Ensure that the loaded themes are correctly stored in the themesMap.
*/

// ********RoostGPT********
package com.houarizegai.calculator.ui;

import static org.junit.jupiter.api.Assertions.*;

import javax.swing.*;
import java.awt.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class CalculatorUI_CalculatorUI_772bd0bc5d_Test {

    private CalculatorUI calculatorUI;
    private JFrame window;

    @BeforeEach
    public void setup() {
        calculatorUI = new CalculatorUI();
        window = Mockito.spy(new JFrame());
    }

    @Test
    public void testWindowInitialization() {
        assertEquals("Calculator", window.getTitle());
        assertEquals(410, window.getWidth());
        assertEquals(600, window.getHeight());
        assertNull(window.getLocation());
    }

    @Test
    public void testLayoutDesign() {
        assertNull(window.getLayout());
    }

    @Test
    public void testInputScreenInitialization() {
        JTextField inputScreen = Mockito.spy(new JTextField());
        assertNotNull(inputScreen);
        assertEquals(350, inputScreen.getBounds().width);
        assertEquals(70, inputScreen.getBounds().height);
        assertFalse(inputScreen.isEditable());
        assertEquals(Color.WHITE, inputScreen.getBackground());
        assertEquals("Comic Sans MS", inputScreen.getFont().getName());
    }

    @Test
    public void testButtonInitialization() {
        JButton btn = Mockito.spy(new JButton());
        assertNotNull(btn);
        assertEquals(80, btn.getBounds().width);
        assertEquals(70, btn.getBounds().height);
        assertEquals("Comic Sans MS", btn.getFont().getName());
        assertFalse(btn.isFocusable());
    }

    @Test
    public void testCalculatorTypeSelectorInitialization() {
        JComboBox<String> comboCalculatorType = Mockito.spy(new JComboBox<>());
        assertNotNull(comboCalculatorType);
        assertEquals(20, comboCalculatorType.getBounds().x);
        assertEquals(30, comboCalculatorType.getBounds().y);
        assertEquals(140, comboCalculatorType.getBounds().width);
        assertEquals(25, comboCalculatorType.getBounds().height);
        assertEquals("Calculator type", comboCalculatorType.getToolTipText());
    }

    @Test
    public void testThemeSelectorInitialization() {
        JComboBox<String> comboTheme = Mockito.spy(new JComboBox<>());
        assertNotNull(comboTheme);
        assertEquals(230, comboTheme.getBounds().x);
        assertEquals(30, comboTheme.getBounds().y);
        assertEquals(140, comboTheme.getBounds().width);
        assertEquals(25, comboTheme.getBounds().height);
        assertEquals("Theme", comboTheme.getToolTipText());
    }

    @Test
    public void testWindowLayout() {
        assertNull(window.getLayout());
    }

    @Test
    public void testWindowResizable() {
        assertFalse(window.isResizable());
    }

    @Test
    public void testWindowCloseOperation() {
        assertEquals(JFrame.EXIT_ON_CLOSE, window.getDefaultCloseOperation());
    }

    @Test
    public void testWindowVisibility() {
        assertTrue(window.isVisible());
    }

    @Test
    public void testColumnsAndRows() {
        int[] columns = {20, 110, 200, 290, 380};
        int[] rows = {60, 160, 240, 320, 400, 480};
        assertNotNull(columns);
        assertNotNull(rows);
        assertEquals(5, columns.length);
        assertEquals(6, rows.length);
    }

    @Test
    public void testThemeMap() {
        assertNotNull(calculatorUI.themesMap);
        assertFalse(calculatorUI.themesMap.isEmpty());
    }
}
