// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
- Description: Test the addition operation
- Input: firstNumber = 5.0, secondNumber = 7.0, operator = '+'
- Expected Output: 12.0

Test Scenario 2:
- Description: Test the subtraction operation
- Input: firstNumber = 10.0, secondNumber = 6.0, operator = '-'
- Expected Output: 4.0

Test Scenario 3:
- Description: Test the multiplication operation
- Input: firstNumber = 3.0, secondNumber = 4.0, operator = '*'
- Expected Output: 12.0

Test Scenario 4:
- Description: Test the division operation
- Input: firstNumber = 15.0, secondNumber = 5.0, operator = '/'
- Expected Output: 3.0

Test Scenario 5:
- Description: Test the modulus operation
- Input: firstNumber = 10.0, secondNumber = 3.0, operator = '%'
- Expected Output: 1.0

Test Scenario 6:
- Description: Test the power operation
- Input: firstNumber = 2.0, secondNumber = 3.0, operator = '^'
- Expected Output: 8.0

Test Scenario 7:
- Description: Test the default case when an invalid operator is provided
- Input: firstNumber = 2.0, secondNumber = 3.0, operator = 'a'
- Expected Output: 3.0

Test Scenario 8:
- Description: Test the division operation with secondNumber as 0
- Input: firstNumber = 15.0, secondNumber = 0.0, operator = '/'
- Expected Output: Infinity

Test Scenario 9:
- Description: Test the modulus operation with secondNumber as 0
- Input: firstNumber = 10.0, secondNumber = 0.0, operator = '%'
- Expected Output: NaN

Test Scenario 10:
- Description: Test the power operation with negative exponent
- Input: firstNumber = 2.0, secondNumber = -3.0, operator = '^'
- Expected Output: 0.125
*/

// ********RoostGPT********
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import com.houarizegai.calculator.ui.CalculatorUI;

public class CalculatorUI_calculate_755b65b191_Test {

    CalculatorUI calculatorUI = new CalculatorUI();

    @Test
    public void testCalculate() {
        assertEquals(12.0, calculatorUI.calculate(5.0, 7.0, '+'));
        assertEquals(4.0, calculatorUI.calculate(10.0, 6.0, '-'));
        assertEquals(12.0, calculatorUI.calculate(3.0, 4.0, '*'));
        assertEquals(3.0, calculatorUI.calculate(15.0, 5.0, '/'));
        assertEquals(1.0, calculatorUI.calculate(10.0, 3.0, '%'));
        assertEquals(8.0, calculatorUI.calculate(2.0, 3.0, '^'));
        assertEquals(3.0, calculatorUI.calculate(2.0, 3.0, 'a'));
        assertEquals(Double.POSITIVE_INFINITY, calculatorUI.calculate(15.0, 0.0, '/'));
        assertEquals(Double.NaN, calculatorUI.calculate(10.0, 0.0, '%'));
        assertEquals(0.125, calculatorUI.calculate(2.0, -3.0, '^'));
    }
}
