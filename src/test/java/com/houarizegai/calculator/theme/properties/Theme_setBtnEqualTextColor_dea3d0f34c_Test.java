// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify that the function accepts valid color codes.
   - Input: "#FFFFFF"
   - Expected output: The color of the button text should be set to white.

2. Scenario: Verify that the function handles invalid color codes gracefully.
   - Input: "InvalidColorCode"
   - Expected output: The function should throw an error or ignore the invalid color code.

3. Scenario: Verify that the function accepts color names.
   - Input: "Red"
   - Expected output: The color of the button text should be set to red.

4. Scenario: Verify that the function handles null values.
   - Input: null
   - Expected output: The function should throw an error or ignore the null value.

5. Scenario: Verify that the function handles empty strings.
   - Input: ""
   - Expected output: The function should throw an error or ignore the empty string.

6. Scenario: Verify that the function handles color codes without the hash symbol.
   - Input: "FFFFFF"
   - Expected output: The function should throw an error or ignore the color code without the hash symbol.

7. Scenario: Verify that the function handles case sensitivity in color codes.
   - Input: "#ffffff"
   - Expected output: The color of the button text should be set to white.

8. Scenario: Verify that the function handles color codes with fewer than six characters.
   - Input: "#FFF"
   - Expected output: The function should throw an error or ignore the color code with fewer than six characters.

9. Scenario: Verify that the function handles color codes with more than six characters.
   - Input: "#FFFFFFF"
   - Expected output: The function should throw an error or ignore the color code with more than six characters.

10. Scenario: Verify that the function handles color names with different case.
    - Input: "RED"
    - Expected output: The color of the button text should be set to red.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setBtnEqualTextColor_dea3d0f34c_Test {

    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testSetBtnEqualTextColor_ValidColorCode() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_InvalidColorCode() {
        assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualTextColor("InvalidColorCode");
        });
    }

    @Test
    public void testSetBtnEqualTextColor_ColorName() {
        theme.setBtnEqualTextColor("Red");
        assertEquals("Red", theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_NullValue() {
        assertThrows(NullPointerException.class, () -> {
            theme.setBtnEqualTextColor(null);
        });
    }

    @Test
    public void testSetBtnEqualTextColor_EmptyString() {
        assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualTextColor("");
        });
    }

    @Test
    public void testSetBtnEqualTextColor_ColorCodeWithoutHash() {
        assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualTextColor("FFFFFF");
        });
    }

    @Test
    public void testSetBtnEqualTextColor_CaseSensitiveColorCode() {
        theme.setBtnEqualTextColor("#ffffff");
        assertEquals("#ffffff", theme.getBtnEqualTextColor());
    }

    @Test
    public void testSetBtnEqualTextColor_ColorCodeWithFewerThanSixChars() {
        assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualTextColor("#FFF");
        });
    }

    @Test
    public void testSetBtnEqualTextColor_ColorCodeWithMoreThanSixChars() {
        assertThrows(IllegalArgumentException.class, () -> {
            theme.setBtnEqualTextColor("#FFFFFFF");
        });
    }

    @Test
    public void testSetBtnEqualTextColor_ColorNamesWithDifferentCase() {
        theme.setBtnEqualTextColor("RED");
        assertEquals("RED", theme.getBtnEqualTextColor());
    }
}
