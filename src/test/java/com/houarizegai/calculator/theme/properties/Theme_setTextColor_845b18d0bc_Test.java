// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when a valid color code is passed as input.
   Given a valid color code, when `setTextColor` is called, then the color should be set to the given color code.

2. Scenario: Test when a valid color name is passed as input.
   Given a valid color name, when `setTextColor` is called, then the color should be set to the given color name.

3. Scenario: Test when invalid color code is passed as input.
   Given an invalid color code, when `setTextColor` is called, then the color should not be set and an appropriate error should be handled or thrown.

4. Scenario: Test when invalid color name is passed as input.
   Given an invalid color name, when `setTextColor` is called, then the color should not be set and an appropriate error should be handled or thrown.

5. Scenario: Test when null is passed as input.
   Given null, when `setTextColor` is called, then the color should not be set and an appropriate error should be handled or thrown.

6. Scenario: Test when empty string is passed as input.
   Given an empty string, when `setTextColor` is called, then the color should not be set and an appropriate error should be handled or thrown.

7. Scenario: Test when a color name with leading or trailing whitespaces is passed as input.
   Given a color name with leading or trailing whitespaces, when `setTextColor` is called, then the color should be set to the color name without the whitespaces.

8. Scenario: Test when a color code with leading or trailing whitespaces is passed as input.
   Given a color code with leading or trailing whitespaces, when `setTextColor` is called, then the color should be set to the color code without the whitespaces. 

Note: The above scenarios are assuming there are some predefined valid color names and color codes. If there are no such restrictions in the actual application, then scenarios 3, 4, 5, 6 might not be necessary.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Theme_setTextColor_845b18d0bc_Test {

    private Theme theme;

    @BeforeEach
    public void setUp() {
        theme = new Theme();
    }

    @Test
    public void testSetTextColor_ValidColorCode() {
        String colorCode = "#FFFFFF";
        theme.setTextColor(colorCode);
        assertEquals(colorCode, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_ValidColorName() {
        String colorName = "white";
        theme.setTextColor(colorName);
        assertEquals(colorName, theme.getTextColor());
    }

    @Test
    public void testSetTextColor_InvalidColorCode() {
        String colorCode = "#XYZ";
        assertThrows(IllegalArgumentException.class, () -> theme.setTextColor(colorCode));
    }

    @Test
    public void testSetTextColor_InvalidColorName() {
        String colorName = "notacolor";
        assertThrows(IllegalArgumentException.class, () -> theme.setTextColor(colorName));
    }

    @Test
    public void testSetTextColor_NullInput() {
        assertThrows(NullPointerException.class, () -> theme.setTextColor(null));
    }

    @Test
    public void testSetTextColor_EmptyStringInput() {
        String emptyString = "";
        assertThrows(IllegalArgumentException.class, () -> theme.setTextColor(emptyString));
    }

    @Test
    public void testSetTextColor_WhitespaceColorName() {
        String colorName = " white ";
        theme.setTextColor(colorName);
        assertEquals(colorName.trim(), theme.getTextColor());
    }

    @Test
    public void testSetTextColor_WhitespaceColorCode() {
        String colorCode = " #FFFFFF ";
        theme.setTextColor(colorCode);
        assertEquals(colorCode.trim(), theme.getTextColor());
    }
}
