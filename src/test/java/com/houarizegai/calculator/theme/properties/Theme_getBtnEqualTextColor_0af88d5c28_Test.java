// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

Here are some test scenarios to validate the business logic of the function getBtnEqualTextColor:

1. Scenario: Verify that the function returns a non-null value.
   Given that the btnEqualTextColor has been initialized,
   When the getBtnEqualTextColor function is called,
   Then it should return a non-null string.

2. Scenario: Verify that the function returns the correct value.
   Given that the btnEqualTextColor has been set to a specific color code,
   When the getBtnEqualTextColor function is called,
   Then it should return the same color code.

3. Scenario: Verify that the function returns a default value when the btnEqualTextColor is not set.
   Given that the btnEqualTextColor has not been explicitly set,
   When the getBtnEqualTextColor function is called,
   Then it should return the default color code.

4. Scenario: Verify that the function returns the correct value even after the btnEqualTextColor has been changed.
   Given that the btnEqualTextColor was set to a specific color code and then changed,
   When the getBtnEqualTextColor function is called,
   Then it should return the new color code.

5. Scenario: Verify that the function handles empty string correctly.
   Given that the btnEqualTextColor is set as an empty string,
   When the getBtnEqualTextColor function is called,
   Then it should return an empty string.

6. Scenario: Verify that the function handles white spaces correctly.
   Given that the btnEqualTextColor is set with white spaces,
   When the getBtnEqualTextColor function is called,
   Then it should return the same string with white spaces.

7. Scenario: Verify that the function handles special characters correctly.
   Given that the btnEqualTextColor is set with special characters,
   When the getBtnEqualTextColor function is called,
   Then it should return the same string with special characters.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class Theme_getBtnEqualTextColor_0af88d5c28_Test {

    private Theme theme;

    @BeforeEach
    public void setup() {
        theme = new Theme();
    }

    @Test
    public void testGetBtnEqualTextColor_NotNull() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertNotNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_CorrectValue() {
        theme.setBtnEqualTextColor("#FFFFFF");
        assertEquals("#FFFFFF", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_DefaultValue() {
        assertNull(theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_ChangedValue() {
        theme.setBtnEqualTextColor("#FFFFFF");
        theme.setBtnEqualTextColor("#000000");
        assertEquals("#000000", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_EmptyString() {
        theme.setBtnEqualTextColor("");
        assertEquals("", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_WhiteSpace() {
        theme.setBtnEqualTextColor("   ");
        assertEquals("   ", theme.getBtnEqualTextColor());
    }

    @Test
    public void testGetBtnEqualTextColor_SpecialCharacters() {
        theme.setBtnEqualTextColor("#$%^&*");
        assertEquals("#$%^&*", theme.getBtnEqualTextColor());
    }
}
