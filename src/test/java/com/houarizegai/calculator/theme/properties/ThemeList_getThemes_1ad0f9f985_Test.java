// ********RoostGPT********
/*
Test generated by RoostGPT for test privateMethodsJava using AI Type Open AI and AI Model gpt-4

Here are some test scenarios that you can consider for testing the `getThemes` method of your class:

1. Null Themes Test: Test the `getThemes` method when the `themes` list is null. The expected result should be null.

2. Empty Themes Test: Test the `getThemes` method when the `themes` list is empty. The expected result should be an empty list.

3. Single Theme Test: Test the `getThemes` method when the `themes` list contains only one theme. The expected result should be a list containing the same single theme.

4. Multiple Themes Test: Test the `getThemes` method when the `themes` list contains multiple themes. The expected result should be a list containing all the themes that were in the `themes` list.

5. Duplicate Themes Test: Test the `getThemes` method when the `themes` list contains duplicate themes. The expected result should be a list containing all the themes including duplicates.

6. Order of Themes Test: Test the `getThemes` method to ensure it maintains the order of themes as they were in the `themes` list.

7. Immutable List Test: Test if the list returned by `getThemes` is immutable. If a change is attempted on the returned list, it should throw an `UnsupportedOperationException`.

8. No Side Effects Test: Test if calling `getThemes` does not have any side effects on the `themes` list in your class. After calling `getThemes`, the `themes` list should remain the same.

Please note that the actual tests would depend on the business logic of your application and the behavior of the `getThemes` method.
*/

// ********RoostGPT********
package com.houarizegai.calculator.theme.properties;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ThemeList_getThemes_1ad0f9f985_Test {

    private ThemeList themeList;
    private Theme theme1;
    private Theme theme2;

    @BeforeEach
    void setUp() {
        themeList = new ThemeList();
        theme1 = new Theme();
        theme1.setName("Theme1");
        theme2 = new Theme();
        theme2.setName("Theme2");
    }

    @Test
    void testGetThemesWhenThemesIsNull() {
        themeList.setThemes(null);
        assertNull(themeList.getThemes());
    }

    @Test
    void testGetThemesWhenThemesIsEmpty() {
        themeList.setThemes(Collections.emptyList());
        assertTrue(themeList.getThemes().isEmpty());
    }

    @Test
    void testGetThemesWhenThemesHasSingleTheme() {
        themeList.setThemes(Collections.singletonList(theme1));
        assertEquals(1, themeList.getThemes().size());
        assertEquals(theme1, themeList.getThemes().get(0));
    }

    @Test
    void testGetThemesWhenThemesHasMultipleThemes() {
        themeList.setThemes(Arrays.asList(theme1, theme2));
        assertEquals(2, themeList.getThemes().size());
        assertEquals(theme1, themeList.getThemes().get(0));
        assertEquals(theme2, themeList.getThemes().get(1));
    }

    @Test
    void testGetThemesWhenThemesHasDuplicateThemes() {
        themeList.setThemes(Arrays.asList(theme1, theme1));
        assertEquals(2, themeList.getThemes().size());
        assertEquals(theme1, themeList.getThemes().get(0));
        assertEquals(theme1, themeList.getThemes().get(1));
    }

    @Test
    void testGetThemesOrderOfThemes() {
        themeList.setThemes(Arrays.asList(theme2, theme1));
        assertEquals(2, themeList.getThemes().size());
        assertEquals(theme2, themeList.getThemes().get(0));
        assertEquals(theme1, themeList.getThemes().get(1));
    }

    @Test
    void testGetThemesListIsImmutable() {
        themeList.setThemes(Arrays.asList(theme1, theme2));
        List<Theme> themes = themeList.getThemes();
        assertThrows(UnsupportedOperationException.class, () -> themes.add(new Theme()));
    }

    @Test
    void testGetThemesNoSideEffects() {
        themeList.setThemes(Arrays.asList(theme1, theme2));
        List<Theme> themes = themeList.getThemes();
        themes.remove(0);
        assertEquals(2, themeList.getThemes().size());
    }
}
